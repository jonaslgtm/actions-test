# 工作流名称
name: Daily Date Update

# 定义触发条件
on:
  # 1. 定时触发 - 每天 UTC 时间 00:00 (北京时间 08:00) 运行
  schedule:
    - cron: '0 0 * * *'  #  cron 语法: 分 时 日 月 周
    # 注意: GitHub Actions 使用 UTC 时间
    # 如果要调整到特定时间运行，可以修改这个 cron 表达式
  
  # 2. 允许手动触发工作流
  workflow_dispatch:
  
  # 3. 可选: 当 README.md 文件被修改时也触发 (根据需要取消注释)
  # push:
  #   paths:
  #     - 'README.md'

# 工作流任务
jobs:
  update-date:
    # 运行在最新版本的 Ubuntu 系统上
    runs-on: ubuntu-latest
    
    # 任务步骤
    steps:
      # 步骤 1: 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整历史记录，以便能够推送更改
          fetch-depth: 0
      
      # 步骤 2: 设置 Python 环境 (用于日期处理)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # 使用任何可用的 Python 3 版本
      
      # 步骤 3: 更新 README 中的日期
      - name: Update date in README
        run: |
          # 获取当前日期并格式化为 "YYYY年M月D日" 格式
          # 使用 Python 确保日期格式正确
          CURRENT_DATE=$(python -c "from datetime import datetime; print(datetime.now().strftime('%Y年%-m月%-d日'))")
          
          # 使用 sed 命令替换 README.md 中的日期
          # 查找模式: "今天是：任何日期"
          # 替换为: "今天是：当前日期"
          sed -i "s/今天是：.*/今天是：$CURRENT_DATE/" README.md
          
          # 可选: 打印更改信息
          echo "Updated date to: $CURRENT_DATE"
      
      # 步骤 4: 配置 Git 用户
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
      
      # 步骤 5: 提交更改
      - name: Commit changes
        run: |
          # 检查是否有更改需要提交
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # 添加更改的文件
          git add README.md
          
          # 提交更改
          git commit -m "自动更新日期: $(date +'%Y-%m-%d')"
      
      # 步骤 6: 推送更改
      - name: Push changes
        # 使用 GitHub Actions 的内置令牌推送更改
        run: git push
